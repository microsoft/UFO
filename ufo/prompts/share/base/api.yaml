click_input:
  summary: |-
    "click_input" is to click the control item with mouse.
  class_name: |-
    ClickInputCommand
  usage: |-
    [1] API call: click_input(button: str, double: bool = False, pressed: str = None)
    [2] Args:
      - button: The mouse button to click. One of ''left'', ''right'', ''middle'' or ''x'' (Default: ''left'')
      - double: Whether to perform a double click or not (Default: False)'
      - pressed: The keybord key to press while clicking. For example, ''CONTROL'' for the Control key (Default: None)
    [3] Example: click_input(button="left", double=False), click_input(button="right", double=True, pressed="CONTROL")
    [4] Available control item: All control items.
    [5] Return: None


click_on_coordinates:
  summary: |-
    "click_on_coordinates" is to click on the specific coordinates in the application window, instead of clicking on a specific control item. This API is useful when the control item is not available in the control item list and screenshot, but you want to click on a specific point in the application window. When you use this API, you must estimate the relative fractional x and y coordinates of the point to click on, ranging from 0.0 to 1.0. The origin is the top-left corner of the application window.
  class_name: |-
    ClickOnCoordinatesCommand
  usage: |-
    [1] API call: click_on_coordinates(x: float, y: float, button: str, double: bool)
    [2] Args:
      - x: The relative fractional x-coordinate of the point to click on, ranging from 0.0 to 1.0. The origin is the top-left corner of the application window.
      - y: The relative fractional y-coordinate of the point to click on, ranging from 0.0 to 1.0. The origin is the top-left corner of the application window.
      - button: The mouse button to click. One of 'left', 'right'. (Default: 'left')
      - double: Whether to perform a double click or not. (Default: False)
    [3] Example: click_on_coordinates(x=0.5, y=0.5, button="left", double=False)
    [4] Available control item: Control item is not required for this API.
    [5] Return: None


drag_on_coordinates:
  summary: |-
    "drag_on_coordinates" is to drag from one point to another point in the application window, instead of dragging a specific control item. This API is useful when the control item is not available in the control item list and screenshot, but you want to drag from one point to another point in the application window. When you use this API, you must estimate the relative fractional x and y coordinates of the starting point and ending point to drag from and to, ranging from 0.0 to 1.0. The origin is the top-left corner of the application window.
  class_name: |-
    DragOnCoordinatesCommand
  usage: |-
    [1] API call: drag_on_coordinates(start_x: float, start_y: float, end_x: float, end_y: float, button: str = "left", duration: float = 1.0, key_hold: str = None)
    [2] Args:
      - start_x: The relative fractional x-coordinate of the starting point to drag from, ranging from 0.0 to 1.0. The origin is the top-left corner of the application window.
      - start_y: The relative fractional y-coordinate of the starting point to drag from, ranging from 0.0 to 1.0. The origin is the top-left corner of the application window.
      - end_x: The relative fractional x-coordinate of the ending point to drag to, ranging from 0.0 to 1.0. The origin is the top-left corner of the application window.
      - end_y: The relative fractional y-coordinate of the ending point to drag to, ranging from 0.0 to 1.0. The origin is the top-left corner of the application window.
      - button: The mouse button to drag. One of 'left', 'right'. (Default: 'left')
      - duration: The duration of the drag action in seconds. (Default: 1.0)
      - key_hold: The keybord key to hold while dragging. For example, 'shift' for the shift key (Default: None)
    [3] Example: drag_on_coordinates(start_x=0.1, start_y=0.1, end_x=0.9, end_y=0.9, button="left", duration=1.0, key_hold="shift")
    [4] Available control item: Control item is not required for this API.
    [5] Return: None


set_edit_text:
  summary: |-
    "set_edit_text" is to add new text to the control item. If there is already text in the control item, the new text will append to the end of the existing text.
  class_name: |-
    SetEditTextCommand
  usage: |-
    [1] API call: set_edit_text(text: str="The text to input.", clear_current_text: bool=False)
    [2] Args:
      - text: The text input to the Edit control item. You must also use Double Backslash escape character to escape the single quote in the string argument.
      - clear_current_text: Whether to clear the current text in the Edit before setting the new text. If True, the current text will be completely replaced by the new text. (Default: False)
    [3] Example: set_edit_text(text="Hello World. \\n I enjoy the reading of the book 'The Lord of the Rings'. It's a great book.")
    [4] Available control item: [Edit]
    [5] Return: None

annotation:
  summary: |-
    "annotation" is to take a screenshot of the current application window and annotate the control item on the screenshot for further analysis.
  class_name: |-
    AnnotationCommand
  usage: |-
    [1] API call: annotation(control_labels: List[str]=[])
    [2] Args:
      - control_labels: The list of annotated label of the control item. If the list is empty, it will annotate all the control items on the screenshot.
    [3] Example: annotation(control_labels=["1", "2", "3", "36", "58"])
    [4] Available control item: All control items.
    [5] Return: None


summary:
  summary: |-
    "summary" is to summarize your observation of the current application window base on the clean screenshot, or base on available control items. You must use your vision to summarize the image with required information using the argument "text". Do not add information that is not in the image.
  class_name: |-
    SummaryCommand
  usage: |-
    [1] API call: summary(text: str="Your description of the image.")
    [2] Args: 
      - text: The text description of the image with required information. 
    [3] Example: summary(text="The image shows a workflow of a AI agent framework. \\n The framework has three components: the 'data collection', the 'data processing' and the 'data analysis'.")
    [4] Available control item: All control items.
    [5] Return: the summary of the image.

texts:
  summary: |-
    "texts" is to get the text of the control item. It typical apply to Edit and Document control item when user request is to get the text of the control item. This only works for Edit and Document control items. If you want to get the text of other control items, you can use the "summary" API to describe the required information based on the screenshot by yourself.
  class_name: |-
    GetTextsCommand
  usage: |-
    [1] API call: texts()
    [2] Args: None
    [3] Example: texts()
    [4] Available control item: Edit and Document control items.
    [5] Return: the text content of the control item.

wheel_mouse_input:
  summary: |-
    "wheel_mouse_input" is to scroll the control item. It typical apply to a ScrollBar type of control item when user request is to scroll the control item, or the targeted control item is not visible nor available in the control item list, but you know the control item is in the application window and you need to scroll to find it.
  class_name: |-
    WheelMouseInputCommand
  usage: |-
    [1] API call: wheel_mouse_input(wheel_dist: int)
    [2] Args: 
        - wheel_dist: The number of wheel notches to scroll. Positive values indicate upward scrolling, negative values indicate downward scrolling.
    [3] Example: wheel_mouse_input(wheel_dist=-5), wheel_mouse_input(wheel_dist=3)
    [4] All control items or no control item.
    [5] Return: None

keyboard_input:
  summary: |-
    "keyboard_input" is to simulate the keyboard input, such as shortcut keys, or any other keys that you want to input. It can apply to any control item, or just type the keys in the application window without focusing on any control item.
  class_name: |-
    keyboardInputCommand
  usage: |-
    [1] API call: keyboard_input(keys: str, control_focus: bool = True)
    [2] Args:
      - keys: The key to input. It can be any key on the keyboard, with special keys represented by their virtual key codes. For example, "{VK_CONTROL}c" represents the Ctrl+C shortcut key.
      - control_focus: Whether to focus on your selected control item before typing the keys. If False, the hotkeys will operate on the application window. (Default: True)
      - keyboard_input(keys="{VK_CONTROL}c") --> Copy the selected text.
      - keyboard_input(keys="{TAB 2}") --> Press the Tab key twice.
      - keyboard_input(keys="Hello World", control_focus=False) --> Type "Hello World" without focusing on any control item.
    [4] Available control item: All control items.
    [5] Return: None


  